# THIS FILE HAS BEEN AUTO-GENERATED BY "PRISMA DEPLOY"
# DO NOT EDIT THIS FILE DIRECTLY

#
# Model Types
#

type Conversation implements Node {
  id: ID!
  threadId: Int!
  messages(where: MessageWhereInput, orderBy: MessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Message!]
  user(where: UserWhereInput): User
  participants(where: ContactWhereInput, orderBy: ContactOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Contact!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type File implements Node {
  id: ID!
  message(where: MessageWhereInput): Message
  pendingMessage(where: PendingMessageWhereInput): PendingMessage
  contentType: String!
  content: String!
  uploaded: Boolean
  updatedAt: DateTime!
  createdAt: DateTime!
}

type Message implements Node {
  id: ID!
  userSent: Boolean!
  androidMsgId: String!
  address: String!
  sender: String!
  read: Boolean!
  body: String!
  threadId: Int!
  error: Boolean!
  date: DateTime!
  files(where: FileWhereInput, orderBy: FileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [File!]
  conversation(where: ConversationWhereInput): Conversation
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Notification implements Node {
  id: ID!
  error: Boolean!
  body: String!
  actions: [String!]
  date: DateTime
  notificationGroup(where: NotificationGroupWhereInput): NotificationGroup
  createdAt: DateTime!
  updatedAt: DateTime!
}

type NotificationGroup implements Node {
  id: ID!
  notifications(where: NotificationWhereInput, orderBy: NotificationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Notification!]
  user(where: UserWhereInput): User
  createdAt: DateTime!
  updatedAt: DateTime!
}

type PendingMessage implements Node {
  id: ID!
  address: String!
  body: String!
  error: Boolean
  file(where: FileWhereInput): File
  user(where: UserWhereInput): User
  createdAt: DateTime!
  updatedAt: DateTime!
}

type User implements Node {
  id: ID!
  name: String!
  email: String!
  uid: String!
  phone: String!
  conversations(where: ConversationWhereInput, orderBy: ConversationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Conversation!]
  pendingMessages(where: PendingMessageWhereInput, orderBy: PendingMessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PendingMessage!]
  syncComplete: Boolean
  createdAt: DateTime!
  updatedAt: DateTime!
}


#
# Other Types
#

type AggregateContact {
  count: Int!
}

type AggregateConversation {
  count: Int!
}

type AggregateFile {
  count: Int!
}

type AggregateMessage {
  count: Int!
}

type AggregateNotification {
  count: Int!
}

type AggregateNotificationGroup {
  count: Int!
}

type AggregatePendingMessage {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  """
  The number of nodes that have been affected by the Batch operation.
  """
  count: Long!
}

type Contact {
  phone: String!
  name: String
  conversation(where: ConversationWhereInput): Conversation
}

"""
A connection to a list of items.
"""
type ContactConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [ContactEdge]!
  aggregate: AggregateContact!
}

input ContactCreateInput {
  phone: String!
  name: String
  conversation: ConversationCreateOneWithoutParticipantsInput
}

input ContactCreateManyWithoutConversationInput {
  create: [ContactCreateWithoutConversationInput!]
}

input ContactCreateWithoutConversationInput {
  phone: String!
  name: String
}

"""
An edge in a connection.
"""
type ContactEdge {
  """
  The item at the end of the edge.
  """
  node: Contact!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum ContactOrderByInput {
  phone_ASC
  phone_DESC
  name_ASC
  name_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ContactPreviousValues {
  phone: String!
  name: String
}

type ContactSubscriptionPayload {
  mutation: MutationType!
  node: Contact
  updatedFields: [String!]
  previousValues: ContactPreviousValues
}

input ContactSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ContactSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [ContactSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ContactWhereInput
}

input ContactUpdateInput {
  phone: String
  name: String
  conversation: ConversationUpdateOneWithoutParticipantsInput
}

input ContactUpdateManyWithoutConversationInput {
  create: [ContactCreateWithoutConversationInput!]
}

input ContactWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ContactWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [ContactWhereInput!]
  phone: String
  """
  All values that are not equal to given value.
  """
  phone_not: String
  """
  All values that are contained in given list.
  """
  phone_in: [String!]
  """
  All values that are not contained in given list.
  """
  phone_not_in: [String!]
  """
  All values less than the given value.
  """
  phone_lt: String
  """
  All values less than or equal the given value.
  """
  phone_lte: String
  """
  All values greater than the given value.
  """
  phone_gt: String
  """
  All values greater than or equal the given value.
  """
  phone_gte: String
  """
  All values containing the given string.
  """
  phone_contains: String
  """
  All values not containing the given string.
  """
  phone_not_contains: String
  """
  All values starting with the given string.
  """
  phone_starts_with: String
  """
  All values not starting with the given string.
  """
  phone_not_starts_with: String
  """
  All values ending with the given string.
  """
  phone_ends_with: String
  """
  All values not ending with the given string.
  """
  phone_not_ends_with: String
  name: String
  """
  All values that are not equal to given value.
  """
  name_not: String
  """
  All values that are contained in given list.
  """
  name_in: [String!]
  """
  All values that are not contained in given list.
  """
  name_not_in: [String!]
  """
  All values less than the given value.
  """
  name_lt: String
  """
  All values less than or equal the given value.
  """
  name_lte: String
  """
  All values greater than the given value.
  """
  name_gt: String
  """
  All values greater than or equal the given value.
  """
  name_gte: String
  """
  All values containing the given string.
  """
  name_contains: String
  """
  All values not containing the given string.
  """
  name_not_contains: String
  """
  All values starting with the given string.
  """
  name_starts_with: String
  """
  All values not starting with the given string.
  """
  name_not_starts_with: String
  """
  All values ending with the given string.
  """
  name_ends_with: String
  """
  All values not ending with the given string.
  """
  name_not_ends_with: String
  conversation: ConversationWhereInput
}

"""
A connection to a list of items.
"""
type ConversationConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [ConversationEdge]!
  aggregate: AggregateConversation!
}

input ConversationCreateInput {
  threadId: Int!
  messages: MessageCreateManyWithoutConversationInput
  user: UserCreateOneWithoutConversationsInput
  participants: ContactCreateManyWithoutConversationInput
}

input ConversationCreateManyWithoutUserInput {
  create: [ConversationCreateWithoutUserInput!]
  connect: [ConversationWhereUniqueInput!]
}

input ConversationCreateOneWithoutMessagesInput {
  create: ConversationCreateWithoutMessagesInput
  connect: ConversationWhereUniqueInput
}

input ConversationCreateOneWithoutParticipantsInput {
  create: ConversationCreateWithoutParticipantsInput
  connect: ConversationWhereUniqueInput
}

input ConversationCreateWithoutMessagesInput {
  threadId: Int!
  user: UserCreateOneWithoutConversationsInput
  participants: ContactCreateManyWithoutConversationInput
}

input ConversationCreateWithoutParticipantsInput {
  threadId: Int!
  messages: MessageCreateManyWithoutConversationInput
  user: UserCreateOneWithoutConversationsInput
}

input ConversationCreateWithoutUserInput {
  threadId: Int!
  messages: MessageCreateManyWithoutConversationInput
  participants: ContactCreateManyWithoutConversationInput
}

"""
An edge in a connection.
"""
type ConversationEdge {
  """
  The item at the end of the edge.
  """
  node: Conversation!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum ConversationOrderByInput {
  id_ASC
  id_DESC
  threadId_ASC
  threadId_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ConversationPreviousValues {
  id: ID!
  threadId: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ConversationSubscriptionPayload {
  mutation: MutationType!
  node: Conversation
  updatedFields: [String!]
  previousValues: ConversationPreviousValues
}

input ConversationSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ConversationSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [ConversationSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ConversationWhereInput
}

input ConversationUpdateInput {
  threadId: Int
  messages: MessageUpdateManyWithoutConversationInput
  user: UserUpdateOneWithoutConversationsInput
  participants: ContactUpdateManyWithoutConversationInput
}

input ConversationUpdateManyWithoutUserInput {
  create: [ConversationCreateWithoutUserInput!]
  connect: [ConversationWhereUniqueInput!]
  disconnect: [ConversationWhereUniqueInput!]
  delete: [ConversationWhereUniqueInput!]
  update: [ConversationUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [ConversationUpsertWithWhereUniqueWithoutUserInput!]
}

input ConversationUpdateOneWithoutMessagesInput {
  create: ConversationCreateWithoutMessagesInput
  connect: ConversationWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ConversationUpdateWithoutMessagesDataInput
  upsert: ConversationUpsertWithoutMessagesInput
}

input ConversationUpdateOneWithoutParticipantsInput {
  create: ConversationCreateWithoutParticipantsInput
  connect: ConversationWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ConversationUpdateWithoutParticipantsDataInput
  upsert: ConversationUpsertWithoutParticipantsInput
}

input ConversationUpdateWithoutMessagesDataInput {
  threadId: Int
  user: UserUpdateOneWithoutConversationsInput
  participants: ContactUpdateManyWithoutConversationInput
}

input ConversationUpdateWithoutParticipantsDataInput {
  threadId: Int
  messages: MessageUpdateManyWithoutConversationInput
  user: UserUpdateOneWithoutConversationsInput
}

input ConversationUpdateWithoutUserDataInput {
  threadId: Int
  messages: MessageUpdateManyWithoutConversationInput
  participants: ContactUpdateManyWithoutConversationInput
}

input ConversationUpdateWithWhereUniqueWithoutUserInput {
  where: ConversationWhereUniqueInput!
  data: ConversationUpdateWithoutUserDataInput!
}

input ConversationUpsertWithoutMessagesInput {
  update: ConversationUpdateWithoutMessagesDataInput!
  create: ConversationCreateWithoutMessagesInput!
}

input ConversationUpsertWithoutParticipantsInput {
  update: ConversationUpdateWithoutParticipantsDataInput!
  create: ConversationCreateWithoutParticipantsInput!
}

input ConversationUpsertWithWhereUniqueWithoutUserInput {
  where: ConversationWhereUniqueInput!
  update: ConversationUpdateWithoutUserDataInput!
  create: ConversationCreateWithoutUserInput!
}

input ConversationWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ConversationWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [ConversationWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  threadId: Int
  """
  All values that are not equal to given value.
  """
  threadId_not: Int
  """
  All values that are contained in given list.
  """
  threadId_in: [Int!]
  """
  All values that are not contained in given list.
  """
  threadId_not_in: [Int!]
  """
  All values less than the given value.
  """
  threadId_lt: Int
  """
  All values less than or equal the given value.
  """
  threadId_lte: Int
  """
  All values greater than the given value.
  """
  threadId_gt: Int
  """
  All values greater than or equal the given value.
  """
  threadId_gte: Int
  createdAt: DateTime
  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime
  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  createdAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime
  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime
  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime
  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime
  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
  messages_every: MessageWhereInput
  messages_some: MessageWhereInput
  messages_none: MessageWhereInput
  user: UserWhereInput
  participants_every: ContactWhereInput
  participants_some: ContactWhereInput
  participants_none: ContactWhereInput
}

input ConversationWhereUniqueInput {
  id: ID
}

scalar DateTime

"""
A connection to a list of items.
"""
type FileConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [FileEdge]!
  aggregate: AggregateFile!
}

input FileCreateInput {
  contentType: String!
  content: String!
  uploaded: Boolean
  message: MessageCreateOneWithoutFilesInput
  pendingMessage: PendingMessageCreateOneWithoutFileInput
}

input FileCreateManyWithoutMessageInput {
  create: [FileCreateWithoutMessageInput!]
  connect: [FileWhereUniqueInput!]
}

input FileCreateOneWithoutPendingMessageInput {
  create: FileCreateWithoutPendingMessageInput
  connect: FileWhereUniqueInput
}

input FileCreateWithoutMessageInput {
  contentType: String!
  content: String!
  uploaded: Boolean
  pendingMessage: PendingMessageCreateOneWithoutFileInput
}

input FileCreateWithoutPendingMessageInput {
  contentType: String!
  content: String!
  uploaded: Boolean
  message: MessageCreateOneWithoutFilesInput
}

"""
An edge in a connection.
"""
type FileEdge {
  """
  The item at the end of the edge.
  """
  node: File!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum FileOrderByInput {
  id_ASC
  id_DESC
  contentType_ASC
  contentType_DESC
  content_ASC
  content_DESC
  uploaded_ASC
  uploaded_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type FilePreviousValues {
  id: ID!
  contentType: String!
  content: String!
  uploaded: Boolean
  updatedAt: DateTime!
  createdAt: DateTime!
}

type FileSubscriptionPayload {
  mutation: MutationType!
  node: File
  updatedFields: [String!]
  previousValues: FilePreviousValues
}

input FileSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [FileSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [FileSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: FileWhereInput
}

input FileUpdateInput {
  contentType: String
  content: String
  uploaded: Boolean
  message: MessageUpdateOneWithoutFilesInput
  pendingMessage: PendingMessageUpdateOneWithoutFileInput
}

input FileUpdateManyWithoutMessageInput {
  create: [FileCreateWithoutMessageInput!]
  connect: [FileWhereUniqueInput!]
  disconnect: [FileWhereUniqueInput!]
  delete: [FileWhereUniqueInput!]
  update: [FileUpdateWithWhereUniqueWithoutMessageInput!]
  upsert: [FileUpsertWithWhereUniqueWithoutMessageInput!]
}

input FileUpdateOneWithoutPendingMessageInput {
  create: FileCreateWithoutPendingMessageInput
  connect: FileWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: FileUpdateWithoutPendingMessageDataInput
  upsert: FileUpsertWithoutPendingMessageInput
}

input FileUpdateWithoutMessageDataInput {
  contentType: String
  content: String
  uploaded: Boolean
  pendingMessage: PendingMessageUpdateOneWithoutFileInput
}

input FileUpdateWithoutPendingMessageDataInput {
  contentType: String
  content: String
  uploaded: Boolean
  message: MessageUpdateOneWithoutFilesInput
}

input FileUpdateWithWhereUniqueWithoutMessageInput {
  where: FileWhereUniqueInput!
  data: FileUpdateWithoutMessageDataInput!
}

input FileUpsertWithoutPendingMessageInput {
  update: FileUpdateWithoutPendingMessageDataInput!
  create: FileCreateWithoutPendingMessageInput!
}

input FileUpsertWithWhereUniqueWithoutMessageInput {
  where: FileWhereUniqueInput!
  update: FileUpdateWithoutMessageDataInput!
  create: FileCreateWithoutMessageInput!
}

input FileWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [FileWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [FileWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  contentType: String
  """
  All values that are not equal to given value.
  """
  contentType_not: String
  """
  All values that are contained in given list.
  """
  contentType_in: [String!]
  """
  All values that are not contained in given list.
  """
  contentType_not_in: [String!]
  """
  All values less than the given value.
  """
  contentType_lt: String
  """
  All values less than or equal the given value.
  """
  contentType_lte: String
  """
  All values greater than the given value.
  """
  contentType_gt: String
  """
  All values greater than or equal the given value.
  """
  contentType_gte: String
  """
  All values containing the given string.
  """
  contentType_contains: String
  """
  All values not containing the given string.
  """
  contentType_not_contains: String
  """
  All values starting with the given string.
  """
  contentType_starts_with: String
  """
  All values not starting with the given string.
  """
  contentType_not_starts_with: String
  """
  All values ending with the given string.
  """
  contentType_ends_with: String
  """
  All values not ending with the given string.
  """
  contentType_not_ends_with: String
  content: String
  """
  All values that are not equal to given value.
  """
  content_not: String
  """
  All values that are contained in given list.
  """
  content_in: [String!]
  """
  All values that are not contained in given list.
  """
  content_not_in: [String!]
  """
  All values less than the given value.
  """
  content_lt: String
  """
  All values less than or equal the given value.
  """
  content_lte: String
  """
  All values greater than the given value.
  """
  content_gt: String
  """
  All values greater than or equal the given value.
  """
  content_gte: String
  """
  All values containing the given string.
  """
  content_contains: String
  """
  All values not containing the given string.
  """
  content_not_contains: String
  """
  All values starting with the given string.
  """
  content_starts_with: String
  """
  All values not starting with the given string.
  """
  content_not_starts_with: String
  """
  All values ending with the given string.
  """
  content_ends_with: String
  """
  All values not ending with the given string.
  """
  content_not_ends_with: String
  uploaded: Boolean
  """
  All values that are not equal to given value.
  """
  uploaded_not: Boolean
  updatedAt: DateTime
  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime
  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime
  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
  createdAt: DateTime
  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime
  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  createdAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime
  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  message: MessageWhereInput
  pendingMessage: PendingMessageWhereInput
}

input FileWhereUniqueInput {
  id: ID
  content: String
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

"""
A connection to a list of items.
"""
type MessageConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [MessageEdge]!
  aggregate: AggregateMessage!
}

input MessageCreateInput {
  userSent: Boolean!
  androidMsgId: String!
  address: String!
  sender: String!
  read: Boolean!
  body: String!
  threadId: Int!
  error: Boolean!
  date: DateTime!
  files: FileCreateManyWithoutMessageInput
  conversation: ConversationCreateOneWithoutMessagesInput
}

input MessageCreateManyWithoutConversationInput {
  create: [MessageCreateWithoutConversationInput!]
  connect: [MessageWhereUniqueInput!]
}

input MessageCreateOneWithoutFilesInput {
  create: MessageCreateWithoutFilesInput
  connect: MessageWhereUniqueInput
}

input MessageCreateWithoutConversationInput {
  userSent: Boolean!
  androidMsgId: String!
  address: String!
  sender: String!
  read: Boolean!
  body: String!
  threadId: Int!
  error: Boolean!
  date: DateTime!
  files: FileCreateManyWithoutMessageInput
}

input MessageCreateWithoutFilesInput {
  userSent: Boolean!
  androidMsgId: String!
  address: String!
  sender: String!
  read: Boolean!
  body: String!
  threadId: Int!
  error: Boolean!
  date: DateTime!
  conversation: ConversationCreateOneWithoutMessagesInput
}

"""
An edge in a connection.
"""
type MessageEdge {
  """
  The item at the end of the edge.
  """
  node: Message!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum MessageOrderByInput {
  id_ASC
  id_DESC
  userSent_ASC
  userSent_DESC
  androidMsgId_ASC
  androidMsgId_DESC
  address_ASC
  address_DESC
  sender_ASC
  sender_DESC
  read_ASC
  read_DESC
  body_ASC
  body_DESC
  threadId_ASC
  threadId_DESC
  error_ASC
  error_DESC
  date_ASC
  date_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type MessagePreviousValues {
  id: ID!
  userSent: Boolean!
  androidMsgId: String!
  address: String!
  sender: String!
  read: Boolean!
  body: String!
  threadId: Int!
  error: Boolean!
  date: DateTime!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type MessageSubscriptionPayload {
  mutation: MutationType!
  node: Message
  updatedFields: [String!]
  previousValues: MessagePreviousValues
}

input MessageSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [MessageSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [MessageSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: MessageWhereInput
}

input MessageUpdateInput {
  userSent: Boolean
  androidMsgId: String
  address: String
  sender: String
  read: Boolean
  body: String
  threadId: Int
  error: Boolean
  date: DateTime
  files: FileUpdateManyWithoutMessageInput
  conversation: ConversationUpdateOneWithoutMessagesInput
}

input MessageUpdateManyWithoutConversationInput {
  create: [MessageCreateWithoutConversationInput!]
  connect: [MessageWhereUniqueInput!]
  disconnect: [MessageWhereUniqueInput!]
  delete: [MessageWhereUniqueInput!]
  update: [MessageUpdateWithWhereUniqueWithoutConversationInput!]
  upsert: [MessageUpsertWithWhereUniqueWithoutConversationInput!]
}

input MessageUpdateOneWithoutFilesInput {
  create: MessageCreateWithoutFilesInput
  connect: MessageWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: MessageUpdateWithoutFilesDataInput
  upsert: MessageUpsertWithoutFilesInput
}

input MessageUpdateWithoutConversationDataInput {
  userSent: Boolean
  androidMsgId: String
  address: String
  sender: String
  read: Boolean
  body: String
  threadId: Int
  error: Boolean
  date: DateTime
  files: FileUpdateManyWithoutMessageInput
}

input MessageUpdateWithoutFilesDataInput {
  userSent: Boolean
  androidMsgId: String
  address: String
  sender: String
  read: Boolean
  body: String
  threadId: Int
  error: Boolean
  date: DateTime
  conversation: ConversationUpdateOneWithoutMessagesInput
}

input MessageUpdateWithWhereUniqueWithoutConversationInput {
  where: MessageWhereUniqueInput!
  data: MessageUpdateWithoutConversationDataInput!
}

input MessageUpsertWithoutFilesInput {
  update: MessageUpdateWithoutFilesDataInput!
  create: MessageCreateWithoutFilesInput!
}

input MessageUpsertWithWhereUniqueWithoutConversationInput {
  where: MessageWhereUniqueInput!
  update: MessageUpdateWithoutConversationDataInput!
  create: MessageCreateWithoutConversationInput!
}

input MessageWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [MessageWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [MessageWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  userSent: Boolean
  """
  All values that are not equal to given value.
  """
  userSent_not: Boolean
  androidMsgId: String
  """
  All values that are not equal to given value.
  """
  androidMsgId_not: String
  """
  All values that are contained in given list.
  """
  androidMsgId_in: [String!]
  """
  All values that are not contained in given list.
  """
  androidMsgId_not_in: [String!]
  """
  All values less than the given value.
  """
  androidMsgId_lt: String
  """
  All values less than or equal the given value.
  """
  androidMsgId_lte: String
  """
  All values greater than the given value.
  """
  androidMsgId_gt: String
  """
  All values greater than or equal the given value.
  """
  androidMsgId_gte: String
  """
  All values containing the given string.
  """
  androidMsgId_contains: String
  """
  All values not containing the given string.
  """
  androidMsgId_not_contains: String
  """
  All values starting with the given string.
  """
  androidMsgId_starts_with: String
  """
  All values not starting with the given string.
  """
  androidMsgId_not_starts_with: String
  """
  All values ending with the given string.
  """
  androidMsgId_ends_with: String
  """
  All values not ending with the given string.
  """
  androidMsgId_not_ends_with: String
  address: String
  """
  All values that are not equal to given value.
  """
  address_not: String
  """
  All values that are contained in given list.
  """
  address_in: [String!]
  """
  All values that are not contained in given list.
  """
  address_not_in: [String!]
  """
  All values less than the given value.
  """
  address_lt: String
  """
  All values less than or equal the given value.
  """
  address_lte: String
  """
  All values greater than the given value.
  """
  address_gt: String
  """
  All values greater than or equal the given value.
  """
  address_gte: String
  """
  All values containing the given string.
  """
  address_contains: String
  """
  All values not containing the given string.
  """
  address_not_contains: String
  """
  All values starting with the given string.
  """
  address_starts_with: String
  """
  All values not starting with the given string.
  """
  address_not_starts_with: String
  """
  All values ending with the given string.
  """
  address_ends_with: String
  """
  All values not ending with the given string.
  """
  address_not_ends_with: String
  sender: String
  """
  All values that are not equal to given value.
  """
  sender_not: String
  """
  All values that are contained in given list.
  """
  sender_in: [String!]
  """
  All values that are not contained in given list.
  """
  sender_not_in: [String!]
  """
  All values less than the given value.
  """
  sender_lt: String
  """
  All values less than or equal the given value.
  """
  sender_lte: String
  """
  All values greater than the given value.
  """
  sender_gt: String
  """
  All values greater than or equal the given value.
  """
  sender_gte: String
  """
  All values containing the given string.
  """
  sender_contains: String
  """
  All values not containing the given string.
  """
  sender_not_contains: String
  """
  All values starting with the given string.
  """
  sender_starts_with: String
  """
  All values not starting with the given string.
  """
  sender_not_starts_with: String
  """
  All values ending with the given string.
  """
  sender_ends_with: String
  """
  All values not ending with the given string.
  """
  sender_not_ends_with: String
  read: Boolean
  """
  All values that are not equal to given value.
  """
  read_not: Boolean
  body: String
  """
  All values that are not equal to given value.
  """
  body_not: String
  """
  All values that are contained in given list.
  """
  body_in: [String!]
  """
  All values that are not contained in given list.
  """
  body_not_in: [String!]
  """
  All values less than the given value.
  """
  body_lt: String
  """
  All values less than or equal the given value.
  """
  body_lte: String
  """
  All values greater than the given value.
  """
  body_gt: String
  """
  All values greater than or equal the given value.
  """
  body_gte: String
  """
  All values containing the given string.
  """
  body_contains: String
  """
  All values not containing the given string.
  """
  body_not_contains: String
  """
  All values starting with the given string.
  """
  body_starts_with: String
  """
  All values not starting with the given string.
  """
  body_not_starts_with: String
  """
  All values ending with the given string.
  """
  body_ends_with: String
  """
  All values not ending with the given string.
  """
  body_not_ends_with: String
  threadId: Int
  """
  All values that are not equal to given value.
  """
  threadId_not: Int
  """
  All values that are contained in given list.
  """
  threadId_in: [Int!]
  """
  All values that are not contained in given list.
  """
  threadId_not_in: [Int!]
  """
  All values less than the given value.
  """
  threadId_lt: Int
  """
  All values less than or equal the given value.
  """
  threadId_lte: Int
  """
  All values greater than the given value.
  """
  threadId_gt: Int
  """
  All values greater than or equal the given value.
  """
  threadId_gte: Int
  error: Boolean
  """
  All values that are not equal to given value.
  """
  error_not: Boolean
  date: DateTime
  """
  All values that are not equal to given value.
  """
  date_not: DateTime
  """
  All values that are contained in given list.
  """
  date_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  date_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  date_lt: DateTime
  """
  All values less than or equal the given value.
  """
  date_lte: DateTime
  """
  All values greater than the given value.
  """
  date_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  date_gte: DateTime
  createdAt: DateTime
  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime
  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  createdAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime
  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime
  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime
  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime
  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
  files_every: FileWhereInput
  files_some: FileWhereInput
  files_none: FileWhereInput
  conversation: ConversationWhereInput
}

input MessageWhereUniqueInput {
  id: ID
}

type Mutation {
  createFile(data: FileCreateInput!): File!
  createUser(data: UserCreateInput!): User!
  createConversation(data: ConversationCreateInput!): Conversation!
  createMessage(data: MessageCreateInput!): Message!
  createPendingMessage(data: PendingMessageCreateInput!): PendingMessage!
  createNotificationGroup(data: NotificationGroupCreateInput!): NotificationGroup!
  createNotification(data: NotificationCreateInput!): Notification!
  createContact(data: ContactCreateInput!): Contact!
  updateFile(data: FileUpdateInput!, where: FileWhereUniqueInput!): File
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateConversation(data: ConversationUpdateInput!, where: ConversationWhereUniqueInput!): Conversation
  updateMessage(data: MessageUpdateInput!, where: MessageWhereUniqueInput!): Message
  updatePendingMessage(data: PendingMessageUpdateInput!, where: PendingMessageWhereUniqueInput!): PendingMessage
  updateNotificationGroup(data: NotificationGroupUpdateInput!, where: NotificationGroupWhereUniqueInput!): NotificationGroup
  updateNotification(data: NotificationUpdateInput!, where: NotificationWhereUniqueInput!): Notification
  deleteFile(where: FileWhereUniqueInput!): File
  deleteUser(where: UserWhereUniqueInput!): User
  deleteConversation(where: ConversationWhereUniqueInput!): Conversation
  deleteMessage(where: MessageWhereUniqueInput!): Message
  deletePendingMessage(where: PendingMessageWhereUniqueInput!): PendingMessage
  deleteNotificationGroup(where: NotificationGroupWhereUniqueInput!): NotificationGroup
  deleteNotification(where: NotificationWhereUniqueInput!): Notification
  upsertFile(where: FileWhereUniqueInput!, create: FileCreateInput!, update: FileUpdateInput!): File!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertConversation(where: ConversationWhereUniqueInput!, create: ConversationCreateInput!, update: ConversationUpdateInput!): Conversation!
  upsertMessage(where: MessageWhereUniqueInput!, create: MessageCreateInput!, update: MessageUpdateInput!): Message!
  upsertPendingMessage(where: PendingMessageWhereUniqueInput!, create: PendingMessageCreateInput!, update: PendingMessageUpdateInput!): PendingMessage!
  upsertNotificationGroup(where: NotificationGroupWhereUniqueInput!, create: NotificationGroupCreateInput!, update: NotificationGroupUpdateInput!): NotificationGroup!
  upsertNotification(where: NotificationWhereUniqueInput!, create: NotificationCreateInput!, update: NotificationUpdateInput!): Notification!
  updateManyFiles(data: FileUpdateInput!, where: FileWhereInput!): BatchPayload!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput!): BatchPayload!
  updateManyConversations(data: ConversationUpdateInput!, where: ConversationWhereInput!): BatchPayload!
  updateManyMessages(data: MessageUpdateInput!, where: MessageWhereInput!): BatchPayload!
  updateManyPendingMessages(data: PendingMessageUpdateInput!, where: PendingMessageWhereInput!): BatchPayload!
  updateManyNotificationGroups(data: NotificationGroupUpdateInput!, where: NotificationGroupWhereInput!): BatchPayload!
  updateManyNotifications(data: NotificationUpdateInput!, where: NotificationWhereInput!): BatchPayload!
  updateManyContacts(data: ContactUpdateInput!, where: ContactWhereInput!): BatchPayload!
  deleteManyFiles(where: FileWhereInput!): BatchPayload!
  deleteManyUsers(where: UserWhereInput!): BatchPayload!
  deleteManyConversations(where: ConversationWhereInput!): BatchPayload!
  deleteManyMessages(where: MessageWhereInput!): BatchPayload!
  deleteManyPendingMessages(where: PendingMessageWhereInput!): BatchPayload!
  deleteManyNotificationGroups(where: NotificationGroupWhereInput!): BatchPayload!
  deleteManyNotifications(where: NotificationWhereInput!): BatchPayload!
  deleteManyContacts(where: ContactWhereInput!): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""
An object with an ID
"""
interface Node {
  """
  The id of the object.
  """
  id: ID!
}

"""
A connection to a list of items.
"""
type NotificationConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [NotificationEdge]!
  aggregate: AggregateNotification!
}

input NotificationCreateactionsInput {
  set: [String!]
}

input NotificationCreateInput {
  error: Boolean!
  body: String!
  date: DateTime
  actions: NotificationCreateactionsInput
  notificationGroup: NotificationGroupCreateOneWithoutNotificationsInput
}

input NotificationCreateManyWithoutNotificationGroupInput {
  create: [NotificationCreateWithoutNotificationGroupInput!]
  connect: [NotificationWhereUniqueInput!]
}

input NotificationCreateWithoutNotificationGroupInput {
  error: Boolean!
  body: String!
  date: DateTime
  actions: NotificationCreateactionsInput
}

"""
An edge in a connection.
"""
type NotificationEdge {
  """
  The item at the end of the edge.
  """
  node: Notification!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

"""
A connection to a list of items.
"""
type NotificationGroupConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [NotificationGroupEdge]!
  aggregate: AggregateNotificationGroup!
}

input NotificationGroupCreateInput {
  notifications: NotificationCreateManyWithoutNotificationGroupInput
  user: UserCreateOneInput
}

input NotificationGroupCreateOneWithoutNotificationsInput {
  create: NotificationGroupCreateWithoutNotificationsInput
  connect: NotificationGroupWhereUniqueInput
}

input NotificationGroupCreateWithoutNotificationsInput {
  user: UserCreateOneInput
}

"""
An edge in a connection.
"""
type NotificationGroupEdge {
  """
  The item at the end of the edge.
  """
  node: NotificationGroup!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum NotificationGroupOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type NotificationGroupPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type NotificationGroupSubscriptionPayload {
  mutation: MutationType!
  node: NotificationGroup
  updatedFields: [String!]
  previousValues: NotificationGroupPreviousValues
}

input NotificationGroupSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [NotificationGroupSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [NotificationGroupSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: NotificationGroupWhereInput
}

input NotificationGroupUpdateInput {
  notifications: NotificationUpdateManyWithoutNotificationGroupInput
  user: UserUpdateOneInput
}

input NotificationGroupUpdateOneWithoutNotificationsInput {
  create: NotificationGroupCreateWithoutNotificationsInput
  connect: NotificationGroupWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: NotificationGroupUpdateWithoutNotificationsDataInput
  upsert: NotificationGroupUpsertWithoutNotificationsInput
}

input NotificationGroupUpdateWithoutNotificationsDataInput {
  user: UserUpdateOneInput
}

input NotificationGroupUpsertWithoutNotificationsInput {
  update: NotificationGroupUpdateWithoutNotificationsDataInput!
  create: NotificationGroupCreateWithoutNotificationsInput!
}

input NotificationGroupWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [NotificationGroupWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [NotificationGroupWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  createdAt: DateTime
  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime
  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  createdAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime
  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime
  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime
  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime
  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
  notifications_every: NotificationWhereInput
  notifications_some: NotificationWhereInput
  notifications_none: NotificationWhereInput
  user: UserWhereInput
}

input NotificationGroupWhereUniqueInput {
  id: ID
}

enum NotificationOrderByInput {
  id_ASC
  id_DESC
  error_ASC
  error_DESC
  body_ASC
  body_DESC
  date_ASC
  date_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type NotificationPreviousValues {
  id: ID!
  error: Boolean!
  body: String!
  actions: [String!]
  date: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
}

type NotificationSubscriptionPayload {
  mutation: MutationType!
  node: Notification
  updatedFields: [String!]
  previousValues: NotificationPreviousValues
}

input NotificationSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [NotificationSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [NotificationSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: NotificationWhereInput
}

input NotificationUpdateactionsInput {
  set: [String!]
}

input NotificationUpdateInput {
  error: Boolean
  body: String
  date: DateTime
  actions: NotificationUpdateactionsInput
  notificationGroup: NotificationGroupUpdateOneWithoutNotificationsInput
}

input NotificationUpdateManyWithoutNotificationGroupInput {
  create: [NotificationCreateWithoutNotificationGroupInput!]
  connect: [NotificationWhereUniqueInput!]
  disconnect: [NotificationWhereUniqueInput!]
  delete: [NotificationWhereUniqueInput!]
  update: [NotificationUpdateWithWhereUniqueWithoutNotificationGroupInput!]
  upsert: [NotificationUpsertWithWhereUniqueWithoutNotificationGroupInput!]
}

input NotificationUpdateWithoutNotificationGroupDataInput {
  error: Boolean
  body: String
  date: DateTime
  actions: NotificationUpdateactionsInput
}

input NotificationUpdateWithWhereUniqueWithoutNotificationGroupInput {
  where: NotificationWhereUniqueInput!
  data: NotificationUpdateWithoutNotificationGroupDataInput!
}

input NotificationUpsertWithWhereUniqueWithoutNotificationGroupInput {
  where: NotificationWhereUniqueInput!
  update: NotificationUpdateWithoutNotificationGroupDataInput!
  create: NotificationCreateWithoutNotificationGroupInput!
}

input NotificationWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [NotificationWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [NotificationWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  error: Boolean
  """
  All values that are not equal to given value.
  """
  error_not: Boolean
  body: String
  """
  All values that are not equal to given value.
  """
  body_not: String
  """
  All values that are contained in given list.
  """
  body_in: [String!]
  """
  All values that are not contained in given list.
  """
  body_not_in: [String!]
  """
  All values less than the given value.
  """
  body_lt: String
  """
  All values less than or equal the given value.
  """
  body_lte: String
  """
  All values greater than the given value.
  """
  body_gt: String
  """
  All values greater than or equal the given value.
  """
  body_gte: String
  """
  All values containing the given string.
  """
  body_contains: String
  """
  All values not containing the given string.
  """
  body_not_contains: String
  """
  All values starting with the given string.
  """
  body_starts_with: String
  """
  All values not starting with the given string.
  """
  body_not_starts_with: String
  """
  All values ending with the given string.
  """
  body_ends_with: String
  """
  All values not ending with the given string.
  """
  body_not_ends_with: String
  date: DateTime
  """
  All values that are not equal to given value.
  """
  date_not: DateTime
  """
  All values that are contained in given list.
  """
  date_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  date_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  date_lt: DateTime
  """
  All values less than or equal the given value.
  """
  date_lte: DateTime
  """
  All values greater than the given value.
  """
  date_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  date_gte: DateTime
  createdAt: DateTime
  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime
  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  createdAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime
  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime
  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime
  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime
  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
  notificationGroup: NotificationGroupWhereInput
}

input NotificationWhereUniqueInput {
  id: ID
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
}

"""
A connection to a list of items.
"""
type PendingMessageConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [PendingMessageEdge]!
  aggregate: AggregatePendingMessage!
}

input PendingMessageCreateInput {
  address: String!
  body: String!
  error: Boolean
  file: FileCreateOneWithoutPendingMessageInput
  user: UserCreateOneWithoutPendingMessagesInput
}

input PendingMessageCreateManyWithoutUserInput {
  create: [PendingMessageCreateWithoutUserInput!]
  connect: [PendingMessageWhereUniqueInput!]
}

input PendingMessageCreateOneWithoutFileInput {
  create: PendingMessageCreateWithoutFileInput
  connect: PendingMessageWhereUniqueInput
}

input PendingMessageCreateWithoutFileInput {
  address: String!
  body: String!
  error: Boolean
  user: UserCreateOneWithoutPendingMessagesInput
}

input PendingMessageCreateWithoutUserInput {
  address: String!
  body: String!
  error: Boolean
  file: FileCreateOneWithoutPendingMessageInput
}

"""
An edge in a connection.
"""
type PendingMessageEdge {
  """
  The item at the end of the edge.
  """
  node: PendingMessage!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum PendingMessageOrderByInput {
  id_ASC
  id_DESC
  address_ASC
  address_DESC
  body_ASC
  body_DESC
  error_ASC
  error_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type PendingMessagePreviousValues {
  id: ID!
  address: String!
  body: String!
  error: Boolean
  createdAt: DateTime!
  updatedAt: DateTime!
}

type PendingMessageSubscriptionPayload {
  mutation: MutationType!
  node: PendingMessage
  updatedFields: [String!]
  previousValues: PendingMessagePreviousValues
}

input PendingMessageSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [PendingMessageSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [PendingMessageSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PendingMessageWhereInput
}

input PendingMessageUpdateInput {
  address: String
  body: String
  error: Boolean
  file: FileUpdateOneWithoutPendingMessageInput
  user: UserUpdateOneWithoutPendingMessagesInput
}

input PendingMessageUpdateManyWithoutUserInput {
  create: [PendingMessageCreateWithoutUserInput!]
  connect: [PendingMessageWhereUniqueInput!]
  disconnect: [PendingMessageWhereUniqueInput!]
  delete: [PendingMessageWhereUniqueInput!]
  update: [PendingMessageUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [PendingMessageUpsertWithWhereUniqueWithoutUserInput!]
}

input PendingMessageUpdateOneWithoutFileInput {
  create: PendingMessageCreateWithoutFileInput
  connect: PendingMessageWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: PendingMessageUpdateWithoutFileDataInput
  upsert: PendingMessageUpsertWithoutFileInput
}

input PendingMessageUpdateWithoutFileDataInput {
  address: String
  body: String
  error: Boolean
  user: UserUpdateOneWithoutPendingMessagesInput
}

input PendingMessageUpdateWithoutUserDataInput {
  address: String
  body: String
  error: Boolean
  file: FileUpdateOneWithoutPendingMessageInput
}

input PendingMessageUpdateWithWhereUniqueWithoutUserInput {
  where: PendingMessageWhereUniqueInput!
  data: PendingMessageUpdateWithoutUserDataInput!
}

input PendingMessageUpsertWithoutFileInput {
  update: PendingMessageUpdateWithoutFileDataInput!
  create: PendingMessageCreateWithoutFileInput!
}

input PendingMessageUpsertWithWhereUniqueWithoutUserInput {
  where: PendingMessageWhereUniqueInput!
  update: PendingMessageUpdateWithoutUserDataInput!
  create: PendingMessageCreateWithoutUserInput!
}

input PendingMessageWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [PendingMessageWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [PendingMessageWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  address: String
  """
  All values that are not equal to given value.
  """
  address_not: String
  """
  All values that are contained in given list.
  """
  address_in: [String!]
  """
  All values that are not contained in given list.
  """
  address_not_in: [String!]
  """
  All values less than the given value.
  """
  address_lt: String
  """
  All values less than or equal the given value.
  """
  address_lte: String
  """
  All values greater than the given value.
  """
  address_gt: String
  """
  All values greater than or equal the given value.
  """
  address_gte: String
  """
  All values containing the given string.
  """
  address_contains: String
  """
  All values not containing the given string.
  """
  address_not_contains: String
  """
  All values starting with the given string.
  """
  address_starts_with: String
  """
  All values not starting with the given string.
  """
  address_not_starts_with: String
  """
  All values ending with the given string.
  """
  address_ends_with: String
  """
  All values not ending with the given string.
  """
  address_not_ends_with: String
  body: String
  """
  All values that are not equal to given value.
  """
  body_not: String
  """
  All values that are contained in given list.
  """
  body_in: [String!]
  """
  All values that are not contained in given list.
  """
  body_not_in: [String!]
  """
  All values less than the given value.
  """
  body_lt: String
  """
  All values less than or equal the given value.
  """
  body_lte: String
  """
  All values greater than the given value.
  """
  body_gt: String
  """
  All values greater than or equal the given value.
  """
  body_gte: String
  """
  All values containing the given string.
  """
  body_contains: String
  """
  All values not containing the given string.
  """
  body_not_contains: String
  """
  All values starting with the given string.
  """
  body_starts_with: String
  """
  All values not starting with the given string.
  """
  body_not_starts_with: String
  """
  All values ending with the given string.
  """
  body_ends_with: String
  """
  All values not ending with the given string.
  """
  body_not_ends_with: String
  error: Boolean
  """
  All values that are not equal to given value.
  """
  error_not: Boolean
  createdAt: DateTime
  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime
  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  createdAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime
  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime
  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime
  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime
  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
  file: FileWhereInput
  user: UserWhereInput
}

input PendingMessageWhereUniqueInput {
  id: ID
}

type Query {
  files(where: FileWhereInput, orderBy: FileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [File]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  conversations(where: ConversationWhereInput, orderBy: ConversationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Conversation]!
  messages(where: MessageWhereInput, orderBy: MessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Message]!
  pendingMessages(where: PendingMessageWhereInput, orderBy: PendingMessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PendingMessage]!
  notificationGroups(where: NotificationGroupWhereInput, orderBy: NotificationGroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [NotificationGroup]!
  notifications(where: NotificationWhereInput, orderBy: NotificationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Notification]!
  contacts(where: ContactWhereInput, orderBy: ContactOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Contact]!
  file(where: FileWhereUniqueInput!): File
  user(where: UserWhereUniqueInput!): User
  conversation(where: ConversationWhereUniqueInput!): Conversation
  message(where: MessageWhereUniqueInput!): Message
  pendingMessage(where: PendingMessageWhereUniqueInput!): PendingMessage
  notificationGroup(where: NotificationGroupWhereUniqueInput!): NotificationGroup
  notification(where: NotificationWhereUniqueInput!): Notification
  filesConnection(where: FileWhereInput, orderBy: FileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FileConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  conversationsConnection(where: ConversationWhereInput, orderBy: ConversationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ConversationConnection!
  messagesConnection(where: MessageWhereInput, orderBy: MessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MessageConnection!
  pendingMessagesConnection(where: PendingMessageWhereInput, orderBy: PendingMessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PendingMessageConnection!
  notificationGroupsConnection(where: NotificationGroupWhereInput, orderBy: NotificationGroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): NotificationGroupConnection!
  notificationsConnection(where: NotificationWhereInput, orderBy: NotificationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): NotificationConnection!
  contactsConnection(where: ContactWhereInput, orderBy: ContactOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ContactConnection!
  """
  Fetches an object given its ID
  """
  node("""
  The ID of an object
  """
  id: ID!): Node
}

type Subscription {
  file(where: FileSubscriptionWhereInput): FileSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  conversation(where: ConversationSubscriptionWhereInput): ConversationSubscriptionPayload
  message(where: MessageSubscriptionWhereInput): MessageSubscriptionPayload
  pendingMessage(where: PendingMessageSubscriptionWhereInput): PendingMessageSubscriptionPayload
  notificationGroup(where: NotificationGroupSubscriptionWhereInput): NotificationGroupSubscriptionPayload
  notification(where: NotificationSubscriptionWhereInput): NotificationSubscriptionPayload
  contact(where: ContactSubscriptionWhereInput): ContactSubscriptionPayload
}

"""
A connection to a list of items.
"""
type UserConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  name: String!
  email: String!
  uid: String!
  phone: String!
  syncComplete: Boolean
  conversations: ConversationCreateManyWithoutUserInput
  pendingMessages: PendingMessageCreateManyWithoutUserInput
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutConversationsInput {
  create: UserCreateWithoutConversationsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutPendingMessagesInput {
  create: UserCreateWithoutPendingMessagesInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutConversationsInput {
  name: String!
  email: String!
  uid: String!
  phone: String!
  syncComplete: Boolean
  pendingMessages: PendingMessageCreateManyWithoutUserInput
}

input UserCreateWithoutPendingMessagesInput {
  name: String!
  email: String!
  uid: String!
  phone: String!
  syncComplete: Boolean
  conversations: ConversationCreateManyWithoutUserInput
}

"""
An edge in a connection.
"""
type UserEdge {
  """
  The item at the end of the edge.
  """
  node: User!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  uid_ASC
  uid_DESC
  phone_ASC
  phone_DESC
  syncComplete_ASC
  syncComplete_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  email: String!
  uid: String!
  phone: String!
  syncComplete: Boolean
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [UserSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [UserSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateDataInput {
  name: String
  email: String
  uid: String
  phone: String
  syncComplete: Boolean
  conversations: ConversationUpdateManyWithoutUserInput
  pendingMessages: PendingMessageUpdateManyWithoutUserInput
}

input UserUpdateInput {
  name: String
  email: String
  uid: String
  phone: String
  syncComplete: Boolean
  conversations: ConversationUpdateManyWithoutUserInput
  pendingMessages: PendingMessageUpdateManyWithoutUserInput
}

input UserUpdateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
}

input UserUpdateOneWithoutConversationsInput {
  create: UserCreateWithoutConversationsInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutConversationsDataInput
  upsert: UserUpsertWithoutConversationsInput
}

input UserUpdateOneWithoutPendingMessagesInput {
  create: UserCreateWithoutPendingMessagesInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutPendingMessagesDataInput
  upsert: UserUpsertWithoutPendingMessagesInput
}

input UserUpdateWithoutConversationsDataInput {
  name: String
  email: String
  uid: String
  phone: String
  syncComplete: Boolean
  pendingMessages: PendingMessageUpdateManyWithoutUserInput
}

input UserUpdateWithoutPendingMessagesDataInput {
  name: String
  email: String
  uid: String
  phone: String
  syncComplete: Boolean
  conversations: ConversationUpdateManyWithoutUserInput
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithoutConversationsInput {
  update: UserUpdateWithoutConversationsDataInput!
  create: UserCreateWithoutConversationsInput!
}

input UserUpsertWithoutPendingMessagesInput {
  update: UserUpdateWithoutPendingMessagesDataInput!
  create: UserCreateWithoutPendingMessagesInput!
}

input UserWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [UserWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [UserWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  name: String
  """
  All values that are not equal to given value.
  """
  name_not: String
  """
  All values that are contained in given list.
  """
  name_in: [String!]
  """
  All values that are not contained in given list.
  """
  name_not_in: [String!]
  """
  All values less than the given value.
  """
  name_lt: String
  """
  All values less than or equal the given value.
  """
  name_lte: String
  """
  All values greater than the given value.
  """
  name_gt: String
  """
  All values greater than or equal the given value.
  """
  name_gte: String
  """
  All values containing the given string.
  """
  name_contains: String
  """
  All values not containing the given string.
  """
  name_not_contains: String
  """
  All values starting with the given string.
  """
  name_starts_with: String
  """
  All values not starting with the given string.
  """
  name_not_starts_with: String
  """
  All values ending with the given string.
  """
  name_ends_with: String
  """
  All values not ending with the given string.
  """
  name_not_ends_with: String
  email: String
  """
  All values that are not equal to given value.
  """
  email_not: String
  """
  All values that are contained in given list.
  """
  email_in: [String!]
  """
  All values that are not contained in given list.
  """
  email_not_in: [String!]
  """
  All values less than the given value.
  """
  email_lt: String
  """
  All values less than or equal the given value.
  """
  email_lte: String
  """
  All values greater than the given value.
  """
  email_gt: String
  """
  All values greater than or equal the given value.
  """
  email_gte: String
  """
  All values containing the given string.
  """
  email_contains: String
  """
  All values not containing the given string.
  """
  email_not_contains: String
  """
  All values starting with the given string.
  """
  email_starts_with: String
  """
  All values not starting with the given string.
  """
  email_not_starts_with: String
  """
  All values ending with the given string.
  """
  email_ends_with: String
  """
  All values not ending with the given string.
  """
  email_not_ends_with: String
  uid: String
  """
  All values that are not equal to given value.
  """
  uid_not: String
  """
  All values that are contained in given list.
  """
  uid_in: [String!]
  """
  All values that are not contained in given list.
  """
  uid_not_in: [String!]
  """
  All values less than the given value.
  """
  uid_lt: String
  """
  All values less than or equal the given value.
  """
  uid_lte: String
  """
  All values greater than the given value.
  """
  uid_gt: String
  """
  All values greater than or equal the given value.
  """
  uid_gte: String
  """
  All values containing the given string.
  """
  uid_contains: String
  """
  All values not containing the given string.
  """
  uid_not_contains: String
  """
  All values starting with the given string.
  """
  uid_starts_with: String
  """
  All values not starting with the given string.
  """
  uid_not_starts_with: String
  """
  All values ending with the given string.
  """
  uid_ends_with: String
  """
  All values not ending with the given string.
  """
  uid_not_ends_with: String
  phone: String
  """
  All values that are not equal to given value.
  """
  phone_not: String
  """
  All values that are contained in given list.
  """
  phone_in: [String!]
  """
  All values that are not contained in given list.
  """
  phone_not_in: [String!]
  """
  All values less than the given value.
  """
  phone_lt: String
  """
  All values less than or equal the given value.
  """
  phone_lte: String
  """
  All values greater than the given value.
  """
  phone_gt: String
  """
  All values greater than or equal the given value.
  """
  phone_gte: String
  """
  All values containing the given string.
  """
  phone_contains: String
  """
  All values not containing the given string.
  """
  phone_not_contains: String
  """
  All values starting with the given string.
  """
  phone_starts_with: String
  """
  All values not starting with the given string.
  """
  phone_not_starts_with: String
  """
  All values ending with the given string.
  """
  phone_ends_with: String
  """
  All values not ending with the given string.
  """
  phone_not_ends_with: String
  syncComplete: Boolean
  """
  All values that are not equal to given value.
  """
  syncComplete_not: Boolean
  createdAt: DateTime
  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime
  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  createdAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime
  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime
  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime
  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime
  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
  conversations_every: ConversationWhereInput
  conversations_some: ConversationWhereInput
  conversations_none: ConversationWhereInput
  pendingMessages_every: PendingMessageWhereInput
  pendingMessages_some: PendingMessageWhereInput
  pendingMessages_none: PendingMessageWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
  phone: String
}
