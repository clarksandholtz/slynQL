# import User, Conversation, Message, Notification from './generated/prisma.graphql'

type Query {
  allConversations: [Conversation]
  allPendingMessages: [PendingMessage!]
  allMessagesSince(timestamp: String!): [Message!]
  allContacts: [Contact!]
  allNotifications: [Notification!]
  me: User
}

type Mutation {
  signup(name: String!, phone: String!, email: String!, uid: String!): AuthPayload!
  login(email: String!, uid: String!): AuthPayload!

  createMessage(androidMsgId: String!, sender: String!, address: String!, participants: [ContactCreateWithoutConversationInput!]!, userSent: Boolean!, body: String!, read: Boolean!, threadId: Int!, date: String!, error: Boolean!, files: [FileCreateInput]): Message!
  createNotification(androidId: String!, appName: String!, ticker: String!, title: String!, text: String!, date: String!, canReply: Boolean) : Notification!
  sendMessage(address: String!, body: String!, file: FileCreateInput): PendingMessage
  updateMessage(id: ID!, read: Boolean, error: Boolean): Message!
  createMessages(messages: [ClientMessageCreateInput!]): StatusPayload!

  markThreadAsRead(threadId: Int!): StatusPayload!

  deleteMessage(id: ID!): Message!
  deleteConversation(id: ID!): Conversation!
  deleteAllMessages: StatusPayload!

  seed : StatusPayload!
}

type Subscription {
  pendingMessages(token: String!) : PendingMessage!
  syncComplete(token: String!) : StatusPayload
  newMessage(token: String!) : Message!
  markedAsRead(token: String!) : Conversation!
  newNotification(token: String!) : Notification!
}

type AuthPayload {
  token: String!
  user: User!
}

type StatusPayload {
  success: Boolean!
  status: String
}

input ClientMessageCreateInput {
  userSent: Boolean!
  androidMsgId: String!
  address: String!
  participants: [ContactCreateWithoutConversationInput!]
  sender: String!
  read: Boolean!
  body: String!
  threadId: Int!
  error: Boolean!
  files: [FileCreateInput!]
  date: String!
}